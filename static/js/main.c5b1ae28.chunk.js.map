{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","container/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","props","id","name","email","className","src","alt","width","CardList","robots","cards","map","robot","index","key","SearchBox","searchField","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onRequestRobots","onSearch","isPending","filteredRobots","filter","toLowerCase","includes","message","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","initialSearchFieldState","initialRobotState","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","reduxThunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.c5b1ae28.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = (props) => {\r\n  const { id, name, email } = props;\r\n  return (\r\n    <div className=\"tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5\">\r\n      <img className=\"br-100 bg-lightest-blue\" src={`https://robohash.org/${id}?200x200`} alt='robot' width=\"70%\" />\r\n      <div>\r\n        <h3>{name}</h3>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n  const cards = robots.map((robot, index) =>\r\n    (\r\n      <Card\r\n        key={index}\r\n        id={robots[index].id}\r\n        name={robots[index].name}\r\n        email={robots[index].email} />\r\n    )\r\n  );\r\n  return (\r\n    <div>\r\n      {cards}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchField, searchChange}) => {\r\n  return (\r\n    <div className=\"pa2\">\r\n      <input \r\n        className=\"pa3 ba b--green bg-lightest-blue shadow-5 br2\"\r\n        type=\"text\"\r\n        placeholder='Search Robots'\r\n        onChange={searchChange} \r\n      />\r\n    </div>\r\n    \r\n  );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n  return (\r\n    <div style={{ overflowY: 'scroll', border: '5px solid black', height: '500px' }}>\r\n      {props.children}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      hasError: false\r\n    };\r\n  }\r\n\r\n  componentDidCatch(error, info) {\r\n    this.setState({ hasError: true });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.hasError) {\r\n      return <h1 className=\"tc f1 light-blue\">Oop! Unable to process and proceed</h1>\r\n    }\r\n\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundry;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport './App.css';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundry from '../components/ErrorBoundary';\r\nimport { setSearchField, requestRobots } from '../actions';\r\n// import { robots } from '../container/robots';\r\n\r\nconst mapStateToProps = (state) => {\r\n  const { searchRobots: { searchField }, requestRobots: { robots, isPending, error } } = state;\r\n  return {\r\n    searchField,\r\n    robots,\r\n    isPending, \r\n    error\r\n  };\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onSearch: (event) => dispatch(setSearchField(event.target.value)),\r\n    onRequestRobots: () => dispatch(requestRobots()),\r\n  }\r\n}\r\nclass App extends Component {\r\n\r\n  componentDidMount() {\r\n    this.props.onRequestRobots();\r\n  }\r\n\r\n  render() {\r\n    const { onSearch, searchField, robots, isPending, error } = this.props;\r\n    const filteredRobots = robots.filter(robot => {\r\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n    });\r\n    \r\n    if (error && !isPending) {\r\n      return <h1 className=\"tc f2 light-blue\">{error.message}</h1>\r\n    }\r\n\r\n    if (isPending) {\r\n      return <h1 className=\"tc f2 light-blue\">Loading...</h1>\r\n    } \r\n    \r\n    if (robots){\r\n      return (\r\n        <div className=\"tc\">\r\n          <h1 className=\"f2 light-blue\">RoboFriends</h1>\r\n          <SearchBox searchChange={onSearch} />\r\n          <Scroll>\r\n            <ErrorBoundry>\r\n              <CardList robots={filteredRobots}/>\r\n            </ErrorBoundry>\r\n          </Scroll>\r\n        </div> \r\n      )\r\n    } \r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { \r\n  CHANGE_SEARCH_FILED,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_FAILED,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n} from './constants';\r\n\r\nexport const setSearchField = value => ({\r\n  type: CHANGE_SEARCH_FILED,\r\n  payload: value\r\n});\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n  dispatch({ type: REQUEST_ROBOTS_PENDING, payload: 'PENDING...' });\r\n  fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(response => response.json())\r\n    .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\r\n    .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }));\r\n}","export const CHANGE_SEARCH_FILED = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { \r\n  CHANGE_SEARCH_FILED,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_FAILED,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n} from './constants';\r\n\r\nconst initialSearchFieldState = {\r\n  searchField: ''\r\n};\r\n\r\nconst initialRobotState = {\r\n  robots: [],\r\n  isPending: false,\r\n  error: ''\r\n};\r\n\r\nexport const searchRobots = (state = initialSearchFieldState, action = {}) => {\r\n  switch(action.type) {\r\n    case CHANGE_SEARCH_FILED: \r\n      return Object.assign({}, state, { searchField: action.payload });\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const requestRobots = (state = initialRobotState, action = {}) => {\r\n  switch (action.type) {\r\n    case REQUEST_ROBOTS_PENDING:\r\n      return Object.assign({}, state, { isPending: true });\r\n    case REQUEST_ROBOTS_SUCCESS:\r\n      return Object.assign({}, state, { robots: action.payload, isPending: false });\r\n    case REQUEST_ROBOTS_FAILED:\r\n      return Object.assign({}, state, { error: action.payload, isPending: false });\r\n    default:\r\n      return state;\r\n  }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\n// import { createLogger } from 'redux-logger';\nimport reduxThunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './container/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport { searchRobots, requestRobots } from './reducers';\n\n// const logger = createLogger();\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\nconst store = createStore(rootReducer, applyMiddleware(reduxThunkMiddleware));\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}